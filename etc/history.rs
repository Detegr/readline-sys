// automatically generated by rust-bindgen

pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn = unsafe extern "C" fn(__cookie: *mut ::libc::c_void,
                                             __buf: *mut ::libc::c_char,
                                             __nbytes: size_t)
                                             -> __ssize_t;
pub type __io_write_fn = unsafe extern "C" fn(__cookie: *mut ::libc::c_void,
                                              __buf: *const ::libc::c_char,
                                              __n: size_t)
                                              -> __ssize_t;
pub type __io_seek_fn = unsafe extern "C" fn(__cookie: *mut ::libc::c_void,
                                             __pos: *mut __off64_t,
                                             __w: ::libc::c_int)
                                             -> ::libc::c_int;
pub type __io_close_fn = unsafe extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_sigevent { }
pub type pid_t = __pid_t;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type Function = ::libc::c_void;
pub type VFunction = ::libc::c_void;
pub type CPFunction = ::libc::c_void;
pub type CPPFunction = ::libc::c_void;
pub type rl_command_func_t = extern "C" fn(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
pub type rl_compentry_func_t = unsafe extern "C" fn(arg1: *const ::libc::c_char,
                                                    arg2: ::libc::c_int)
                                                    -> *mut ::libc::c_char;
pub type rl_completion_func_t = unsafe extern "C" fn(arg1: *const ::libc::c_char,
                                                     arg2: ::libc::c_int,
                                                     arg3: ::libc::c_int)
                                                     -> *mut *mut ::libc::c_char;
pub type rl_quote_func_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char,
                                                arg2: ::libc::c_int,
                                                arg3: *mut ::libc::c_char)
                                                -> *mut ::libc::c_char;
pub type rl_dequote_func_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
                                                  -> *mut ::libc::c_char;
pub type rl_compignore_func_t = unsafe extern "C" fn(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
pub type rl_compdisp_func_t = unsafe extern "C" fn(arg1: *mut *mut ::libc::c_char,
                                                   arg2: ::libc::c_int,
                                                   arg3: ::libc::c_int)
                                                   -> ();
pub type rl_hook_func_t = extern "C" fn() -> ::libc::c_int;
pub type rl_getc_func_t = unsafe extern "C" fn(arg1: *mut FILE) -> ::libc::c_int;
pub type rl_linebuf_func_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
                                                  -> ::libc::c_int;
pub type rl_intfunc_t = extern "C" fn(arg1: ::libc::c_int) -> ::libc::c_int;
pub type rl_icpfunc_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char) -> ::libc::c_int;
pub type rl_icppfunc_t = unsafe extern "C" fn(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
pub type rl_voidfunc_t = extern "C" fn() -> ();
pub type rl_vintfunc_t = extern "C" fn(arg1: ::libc::c_int) -> ();
pub type rl_vcpfunc_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char) -> ();
pub type rl_vcppfunc_t = unsafe extern "C" fn(arg1: *mut *mut ::libc::c_char) -> ();
pub type rl_cpvfunc_t = extern "C" fn() -> *mut ::libc::c_char;
pub type rl_cpifunc_t = extern "C" fn(arg1: ::libc::c_int) -> *mut ::libc::c_char;
pub type rl_cpcpfunc_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
pub type rl_cpcppfunc_t = unsafe extern "C" fn(arg1: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const _ISupper: ::libc::c_uint = 256;
pub const _ISlower: ::libc::c_uint = 512;
pub const _ISalpha: ::libc::c_uint = 1024;
pub const _ISdigit: ::libc::c_uint = 2048;
pub const _ISxdigit: ::libc::c_uint = 4096;
pub const _ISspace: ::libc::c_uint = 8192;
pub const _ISprint: ::libc::c_uint = 16384;
pub const _ISgraph: ::libc::c_uint = 32768;
pub const _ISblank: ::libc::c_uint = 1;
pub const _IScntrl: ::libc::c_uint = 2;
pub const _ISpunct: ::libc::c_uint = 4;
pub const _ISalnum: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__keymap_entry {
    pub _type: ::libc::c_char,
    pub function: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct__keymap_entry {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__keymap_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type KEYMAP_ENTRY = Struct__keymap_entry;
pub type KEYMAP_ENTRY_ARRAY = [KEYMAP_ENTRY; 257usize];
pub type Keymap = *mut KEYMAP_ENTRY;
pub type tilde_hook_func_t = unsafe extern "C" fn(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
pub type Enum_undo_code = ::libc::c_uint;
pub const UNDO_DELETE: ::libc::c_uint = 0;
pub const UNDO_INSERT: ::libc::c_uint = 1;
pub const UNDO_BEGIN: ::libc::c_uint = 2;
pub const UNDO_END: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_undo_list {
    pub next: *mut Struct_undo_list,
    pub start: ::libc::c_int,
    pub end: ::libc::c_int,
    pub text: *mut ::libc::c_char,
    pub what: Enum_undo_code,
}
impl ::std::clone::Clone for Struct_undo_list {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_undo_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type UNDO_LIST = Struct_undo_list;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__funmap {
    pub name: *const ::libc::c_char,
    pub function: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct__funmap {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__funmap {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FUNMAP = Struct__funmap;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_readline_state {
    pub point: ::libc::c_int,
    pub end: ::libc::c_int,
    pub mark: ::libc::c_int,
    pub buffer: *mut ::libc::c_char,
    pub buflen: ::libc::c_int,
    pub ul: *mut UNDO_LIST,
    pub prompt: *mut ::libc::c_char,
    pub rlstate: ::libc::c_int,
    pub done: ::libc::c_int,
    pub kmap: Keymap,
    pub lastfunc: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
    pub insmode: ::libc::c_int,
    pub edmode: ::libc::c_int,
    pub kseqlen: ::libc::c_int,
    pub inf: *mut FILE,
    pub outf: *mut FILE,
    pub pendingin: ::libc::c_int,
    pub _macro: *mut ::libc::c_char,
    pub catchsigs: ::libc::c_int,
    pub catchsigwinch: ::libc::c_int,
    pub reserved: [::libc::c_char; 64usize],
}
impl ::std::clone::Clone for Struct_readline_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_readline_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type histdata_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__hist_entry {
    pub line: *mut ::libc::c_char,
    pub timestamp: *mut ::libc::c_char,
    pub data: histdata_t,
}
impl ::std::clone::Clone for Struct__hist_entry {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__hist_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type HIST_ENTRY = Struct__hist_entry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__hist_state {
    pub entries: *mut *mut HIST_ENTRY,
    pub offset: ::libc::c_int,
    pub length: ::libc::c_int,
    pub size: ::libc::c_int,
    pub flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__hist_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__hist_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type HISTORY_STATE = Struct__hist_state;
#[link(name = "history")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut emacs_standard_keymap: KEYMAP_ENTRY_ARRAY;
    pub static mut emacs_meta_keymap: KEYMAP_ENTRY_ARRAY;
    pub static mut emacs_ctlx_keymap: KEYMAP_ENTRY_ARRAY;
    pub static mut vi_insertion_keymap: KEYMAP_ENTRY_ARRAY;
    pub static mut vi_movement_keymap: KEYMAP_ENTRY_ARRAY;
    pub static mut tilde_expansion_preexpansion_hook:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut tilde_expansion_failure_hook:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut tilde_additional_prefixes: *mut *mut ::libc::c_char;
    pub static mut tilde_additional_suffixes: *mut *mut ::libc::c_char;
    pub static mut rl_undo_list: *mut UNDO_LIST;
    pub static mut funmap: *mut *mut FUNMAP;
    pub static mut rl_library_version: *const ::libc::c_char;
    pub static mut rl_readline_version: ::libc::c_int;
    pub static mut rl_gnu_readline_p: ::libc::c_int;
    pub static mut rl_readline_state: ::libc::c_int;
    pub static mut rl_editing_mode: ::libc::c_int;
    pub static mut rl_insert_mode: ::libc::c_int;
    pub static mut rl_readline_name: *const ::libc::c_char;
    pub static mut rl_prompt: *mut ::libc::c_char;
    pub static mut rl_display_prompt: *mut ::libc::c_char;
    pub static mut rl_line_buffer: *mut ::libc::c_char;
    pub static mut rl_point: ::libc::c_int;
    pub static mut rl_end: ::libc::c_int;
    pub static mut rl_mark: ::libc::c_int;
    pub static mut rl_done: ::libc::c_int;
    pub static mut rl_pending_input: ::libc::c_int;
    pub static mut rl_dispatching: ::libc::c_int;
    pub static mut rl_explicit_arg: ::libc::c_int;
    pub static mut rl_numeric_arg: ::libc::c_int;
    pub static mut rl_last_func: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_terminal_name: *const ::libc::c_char;
    pub static mut rl_instream: *mut FILE;
    pub static mut rl_outstream: *mut FILE;
    pub static mut rl_prefer_env_winsize: ::libc::c_int;
    pub static mut rl_startup_hook: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_pre_input_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_event_hook: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_signal_event_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_input_available_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_getc_function: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_redisplay_function: *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub static mut rl_prep_term_function: *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub static mut rl_deprep_term_function: *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub static mut rl_executing_keymap: Keymap;
    pub static mut rl_binding_keymap: Keymap;
    pub static mut rl_executing_key: ::libc::c_int;
    pub static mut rl_executing_keyseq: *mut ::libc::c_char;
    pub static mut rl_key_sequence_length: ::libc::c_int;
    pub static mut rl_erase_empty_line: ::libc::c_int;
    pub static mut rl_already_prompted: ::libc::c_int;
    pub static mut rl_num_chars_to_read: ::libc::c_int;
    pub static mut rl_executing_macro: *mut ::libc::c_char;
    pub static mut rl_catch_signals: ::libc::c_int;
    pub static mut rl_catch_sigwinch: ::libc::c_int;
    pub static mut rl_change_environment: ::libc::c_int;
    pub static mut rl_completion_entry_function:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_menu_completion_entry_function:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_ignore_some_completions_function:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_attempted_completion_function:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut *mut ::libc::c_char>;
    pub static mut rl_basic_word_break_characters: *const ::libc::c_char;
    pub static mut rl_completer_word_break_characters: *mut ::libc::c_char;
    pub static mut rl_completion_word_break_hook:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_completer_quote_characters: *const ::libc::c_char;
    pub static mut rl_basic_quote_characters: *const ::libc::c_char;
    pub static mut rl_filename_quote_characters: *const ::libc::c_char;
    pub static mut rl_special_prefixes: *const ::libc::c_char;
    pub static mut rl_directory_completion_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_directory_rewrite_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_filename_stat_hook:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_filename_rewrite_hook:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_completion_display_matches_hook:
               *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub static mut rl_filename_completion_desired: ::libc::c_int;
    pub static mut rl_filename_quoting_desired: ::libc::c_int;
    pub static mut rl_filename_quoting_function:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_filename_dequoting_function:
               *mut ::std::option::Option<extern "C" fn()
                                              -> *mut ::libc::c_char>;
    pub static mut rl_char_is_quoted_p:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
    pub static mut rl_attempted_completion_over: ::libc::c_int;
    pub static mut rl_completion_type: ::libc::c_int;
    pub static mut rl_completion_invoking_key: ::libc::c_int;
    pub static mut rl_completion_query_items: ::libc::c_int;
    pub static mut rl_completion_append_character: ::libc::c_int;
    pub static mut rl_completion_suppress_append: ::libc::c_int;
    pub static mut rl_completion_quote_character: ::libc::c_int;
    pub static mut rl_completion_found_quote: ::libc::c_int;
    pub static mut rl_completion_suppress_quote: ::libc::c_int;
    pub static mut rl_sort_completion_matches: ::libc::c_int;
    pub static mut rl_completion_mark_symlink_dirs: ::libc::c_int;
    pub static mut rl_ignore_completion_duplicates: ::libc::c_int;
    pub static mut rl_inhibit_completion: ::libc::c_int;
    pub static mut history_base: ::libc::c_int;
    pub static mut history_length: ::libc::c_int;
    pub static mut history_max_entries: ::libc::c_int;
    pub static mut history_expansion_char: ::libc::c_char;
    pub static mut history_subst_char: ::libc::c_char;
    pub static mut history_word_delimiters: *mut ::libc::c_char;
    pub static mut history_comment_char: ::libc::c_char;
    pub static mut history_no_expand_chars: *mut ::libc::c_char;
    pub static mut history_search_delimiter_chars: *mut ::libc::c_char;
    pub static mut history_quotes_inhibit_expansion: ::libc::c_int;
    pub static mut history_write_timestamps: ::libc::c_int;
    pub static mut max_input_history: ::libc::c_int;
    pub static mut history_inhibit_expansion_function:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
}
#[link(name = "history")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list,
                       arg4: *mut ::libc::c_int)
                       -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list)
                        -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void, arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE,
                       arg2: __off64_t,
                       arg3: ::libc::c_int,
                       arg4: ::libc::c_int)
                       -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char) -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int,
                    __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int,
                    __new: *const ::libc::c_char)
                    -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char,
                   __pfx: *const ::libc::c_char)
                   -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char, __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char,
                   __stream: *mut FILE)
                   -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void,
                    __len: size_t,
                    __modes: *const ::libc::c_char)
                    -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char, __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE,
                   __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int,
                   __n: size_t)
                   -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char, __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char,
                   ...)
                   -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE,
                    __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list)
                    -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char,
                    __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list)
                    -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char,
                    __maxlen: size_t,
                    __format: *const ::libc::c_char,
                    ...)
                    -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char,
                     __maxlen: size_t,
                     __format: *const ::libc::c_char,
                     __arg: __gnuc_va_list)
                     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int,
                    __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list)
                    -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char,
                  ...)
                  -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE,
                   __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list)
                   -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list)
                   -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char,
                 __n: ::libc::c_int,
                 __stream: *mut FILE)
                 -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char,
                      __n: *mut size_t,
                      __delimiter: ::libc::c_int,
                      __stream: *mut FILE)
                      -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char,
                    __n: *mut size_t,
                    __delimiter: ::libc::c_int,
                    __stream: *mut FILE)
                    -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char,
                   __n: *mut size_t,
                   __stream: *mut FILE)
                   -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE) -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void,
                 __size: size_t,
                 __n: size_t,
                 __stream: *mut FILE)
                 -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void,
                  __size: size_t,
                  __n: size_t,
                  __s: *mut FILE)
                  -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void,
                          __size: size_t,
                          __n: size_t,
                          __stream: *mut FILE)
                          -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void,
                           __size: size_t,
                           __n: size_t,
                           __stream: *mut FILE)
                           -> size_t;
    pub fn fseek(__stream: *mut FILE,
                 __off: ::libc::c_long,
                 __whence: ::libc::c_int)
                 -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char, __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char,
                    __maxsize: size_t,
                    __format: *const ::libc::c_char,
                    __tp: *const Struct_tm)
                    -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char,
                      __maxsize: size_t,
                      __format: *const ::libc::c_char,
                      __tp: *const Struct_tm,
                      __loc: __locale_t)
                      -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec)
                     -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec) -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec)
                           -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t,
                        __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t)
                        -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t,
                         __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec)
                         -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn timespec_get(__ts: *mut Struct_timespec, __base: ::libc::c_int) -> ::libc::c_int;
    pub fn __ctype_b_loc() -> *mut *const ::libc::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isalpha(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn iscntrl(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isdigit(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn islower(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isgraph(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isprint(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ispunct(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isspace(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isupper(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isxdigit(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn tolower(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn toupper(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn isblank(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isascii(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn toascii(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn _toupper(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn _tolower(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isalnum_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isalpha_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn iscntrl_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isdigit_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn islower_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isgraph_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isprint_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn ispunct_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isspace_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isupper_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isxdigit_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isblank_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn __tolower_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn tolower_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn __toupper_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn toupper_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void,
                  __src: *const ::libc::c_void,
                  __n: size_t)
                  -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void,
                   __src: *const ::libc::c_void,
                   __n: size_t)
                   -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void,
                   __src: *const ::libc::c_void,
                   __c: ::libc::c_int,
                   __n: size_t)
                   -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void,
                  __c: ::libc::c_int,
                  __n: size_t)
                  -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void,
                  __s2: *const ::libc::c_void,
                  __n: size_t)
                  -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void,
                  __c: ::libc::c_int,
                  __n: size_t)
                  -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char,
                  __src: *const ::libc::c_char)
                  -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char,
                   __src: *const ::libc::c_char,
                   __n: size_t)
                   -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char,
                  __src: *const ::libc::c_char)
                  -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char,
                   __src: *const ::libc::c_char,
                   __n: size_t)
                   -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char,
                   __s2: *const ::libc::c_char,
                   __n: size_t)
                   -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char,
                   __src: *const ::libc::c_char,
                   __n: size_t)
                   -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char,
                     __s2: *const ::libc::c_char,
                     __l: __locale_t)
                     -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char,
                     __n: size_t,
                     __l: __locale_t)
                     -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t) -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char, __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char) -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char)
                   -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char)
                  -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
                      -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char,
                    __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
                    -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t) -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int,
                      __buf: *mut ::libc::c_char,
                      __buflen: size_t)
                      -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t) -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void,
                __s2: *const ::libc::c_void,
                __n: size_t)
                -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char,
                       __n: size_t)
                       -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char)
                  -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char,
                    __src: *const ::libc::c_char)
                    -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char,
                  __src: *const ::libc::c_char)
                  -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char,
                     __n: size_t)
                     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char,
                   __src: *const ::libc::c_char,
                   __n: size_t)
                   -> *mut ::libc::c_char;
    pub fn rl_make_bare_keymap() -> Keymap;
    pub fn rl_copy_keymap(arg1: Keymap) -> Keymap;
    pub fn rl_make_keymap() -> Keymap;
    pub fn rl_discard_keymap(arg1: Keymap) -> ();
    pub fn rl_get_keymap_by_name(arg1: *const ::libc::c_char) -> Keymap;
    pub fn rl_get_keymap() -> Keymap;
    pub fn rl_set_keymap(arg1: Keymap) -> ();
    pub fn tilde_expand(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tilde_expand_word(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tilde_find_word(arg1: *const ::libc::c_char,
                           arg2: ::libc::c_int,
                           arg3: *mut ::libc::c_int)
                           -> *mut ::libc::c_char;
    pub fn rl_digit_argument(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_universal_argument(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_forward_byte(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_forward_char(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_forward(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_byte(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_char(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_beg_of_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_end_of_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_forward_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_refresh_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_clear_screen(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_skip_csi_sequence(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_arrow_keys(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_insert(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_quoted_insert(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_tab_insert(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_newline(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_do_lowercase_version(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_rubout(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_delete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_rubout_or_delete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_delete_horizontal_space(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_delete_or_show_completions(arg1: ::libc::c_int,
                                         arg2: ::libc::c_int)
                                         -> ::libc::c_int;
    pub fn rl_insert_comment(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_upcase_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_downcase_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_capitalize_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_transpose_words(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_transpose_chars(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_char_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_char_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_beginning_of_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_end_of_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_get_next_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_get_previous_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_set_mark(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_exchange_point_and_mark(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_editing_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_emacs_editing_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_overwrite_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_re_read_init_file(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_dump_functions(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_dump_macros(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_dump_variables(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_complete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_possible_completions(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_insert_completions(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_old_menu_complete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_menu_complete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_menu_complete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_kill_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_kill_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_kill_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_backward_kill_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_kill_full_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_unix_word_rubout(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_unix_filename_rubout(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_unix_line_discard(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_copy_region_to_kill(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_kill_region(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_copy_forward_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_copy_backward_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_yank(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_yank_pop(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_yank_nth_arg(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_yank_last_arg(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_reverse_search_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_forward_search_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_start_kbd_macro(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_end_kbd_macro(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_call_last_kbd_macro(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_print_last_kbd_macro(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_revert_line(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_undo_command(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_tilde_expand(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_restart_output(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_stop_output(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_abort(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_tty_status(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_history_search_forward(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_history_search_backward(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_history_substr_search_forward(arg1: ::libc::c_int,
                                            arg2: ::libc::c_int)
                                            -> ::libc::c_int;
    pub fn rl_history_substr_search_backward(arg1: ::libc::c_int,
                                             arg2: ::libc::c_int)
                                             -> ::libc::c_int;
    pub fn rl_noninc_forward_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_noninc_reverse_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_noninc_forward_search_again(arg1: ::libc::c_int,
                                          arg2: ::libc::c_int)
                                          -> ::libc::c_int;
    pub fn rl_noninc_reverse_search_again(arg1: ::libc::c_int,
                                          arg2: ::libc::c_int)
                                          -> ::libc::c_int;
    pub fn rl_insert_close(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_callback_handler_install(arg1: *const ::libc::c_char,
                                       arg2: *mut ::std::option::Option<extern "C" fn() -> ()>)
                                       -> ();
    pub fn rl_callback_read_char() -> ();
    pub fn rl_callback_handler_remove() -> ();
    pub fn rl_vi_redo(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_undo(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_yank_arg(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_fetch_history(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_search_again(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_complete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_tilde_expand(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_prev_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_next_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_end_word(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_insert_beg(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_append_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_append_eol(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_eof_maybe(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_insertion_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_insert_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_movement_mode(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_arg_digit(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_change_case(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_put(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_column(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_delete_to(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_change_to(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_yank_to(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_rubout(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_delete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_back_to_indent(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_first_print(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_char_search(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_match(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_change_char(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_subst(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_overstrike(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_overstrike_delete(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_replace(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_set_mark(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_goto_mark(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_check() -> ::libc::c_int;
    pub fn rl_vi_domove(arg1: ::libc::c_int, arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_bracktype(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_start_inserting(arg1: ::libc::c_int,
                                 arg2: ::libc::c_int,
                                 arg3: ::libc::c_int)
                                 -> ();
    pub fn rl_vi_fWord(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_bWord(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_eWord(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_fword(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_bword(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_vi_eword(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn readline(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn rl_set_prompt(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rl_expand_prompt(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn rl_initialize() -> ::libc::c_int;
    pub fn rl_discard_argument() -> ::libc::c_int;
    pub fn rl_add_defun(arg1: *const ::libc::c_char,
                        arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
                        arg3: ::libc::c_int)
                        -> ::libc::c_int;
    pub fn rl_bind_key(arg1: ::libc::c_int,
                       arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                       -> ::libc::c_int;
    pub fn rl_bind_key_in_map(arg1: ::libc::c_int,
                              arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
                              arg3: Keymap)
                              -> ::libc::c_int;
    pub fn rl_unbind_key(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_unbind_key_in_map(arg1: ::libc::c_int, arg2: Keymap) -> ::libc::c_int;
    pub fn rl_bind_key_if_unbound(arg1: ::libc::c_int,
                                  arg2:
                                      *mut ::std::option::Option<extern "C" fn()
                                                                     ->
                                                                         ::libc::c_int>)
     -> ::libc::c_int;
    pub fn rl_bind_key_if_unbound_in_map(arg1: ::libc::c_int,
                                         arg2:
                                             *mut ::std::option::Option<extern "C" fn()
                                                                            ->
                                                                                ::libc::c_int>,
                                         arg3: Keymap) -> ::libc::c_int;
    pub fn rl_unbind_function_in_map(arg1:
                                         *mut ::std::option::Option<extern "C" fn()
                                                                        ->
                                                                            ::libc::c_int>,
                                     arg2: Keymap) -> ::libc::c_int;
    pub fn rl_unbind_command_in_map(arg1: *const ::libc::c_char, arg2: Keymap) -> ::libc::c_int;
    pub fn rl_bind_keyseq(arg1: *const ::libc::c_char,
                          arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                          -> ::libc::c_int;
    pub fn rl_bind_keyseq_in_map(arg1: *const ::libc::c_char,
                                 arg2:
                                     *mut ::std::option::Option<extern "C" fn()
                                                                    ->
                                                                        ::libc::c_int>,
                                 arg3: Keymap) -> ::libc::c_int;
    pub fn rl_bind_keyseq_if_unbound(arg1: *const ::libc::c_char,
                                     arg2:
                                         *mut ::std::option::Option<extern "C" fn()
                                                                        ->
                                                                            ::libc::c_int>)
     -> ::libc::c_int;
    pub fn rl_bind_keyseq_if_unbound_in_map(arg1: *const ::libc::c_char,
                                            arg2:
                                                *mut ::std::option::Option<extern "C" fn()
                                                                               ->
                                                                                   ::libc::c_int>,
                                            arg3: Keymap) -> ::libc::c_int;
    pub fn rl_generic_bind(arg1: ::libc::c_int,
                           arg2: *const ::libc::c_char,
                           arg3: *mut ::libc::c_char,
                           arg4: Keymap)
                           -> ::libc::c_int;
    pub fn rl_variable_value(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn rl_variable_bind(arg1: *const ::libc::c_char,
                            arg2: *const ::libc::c_char)
                            -> ::libc::c_int;
    pub fn rl_set_key(arg1: *const ::libc::c_char,
                      arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
                      arg3: Keymap)
                      -> ::libc::c_int;
    pub fn rl_macro_bind(arg1: *const ::libc::c_char,
                         arg2: *const ::libc::c_char,
                         arg3: Keymap)
                         -> ::libc::c_int;
    pub fn rl_translate_keyseq(arg1: *const ::libc::c_char,
                               arg2: *mut ::libc::c_char,
                               arg3: *mut ::libc::c_int)
                               -> ::libc::c_int;
    pub fn rl_untranslate_keyseq(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn rl_named_function(arg1: *const ::libc::c_char)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *const ::libc::c_char)
                                        -> ::libc::c_int>;
    pub fn rl_function_of_keyseq(arg1: *const ::libc::c_char, arg2: Keymap,
                                 arg3: *mut ::libc::c_int)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *const ::libc::c_char,
                                                         arg2: Keymap,
                                                         arg3:
                                                             *mut ::libc::c_int)
                                        -> ::libc::c_int>;
    pub fn rl_list_funmap_names() -> ();
    pub fn rl_invoking_keyseqs_in_map(arg1:
                                          *mut ::std::option::Option<extern "C" fn()
                                                                         ->
                                                                             ::libc::c_int>,
                                      arg2: Keymap)
     -> *mut *mut ::libc::c_char;
    pub fn rl_invoking_keyseqs(arg1: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                               -> *mut *mut ::libc::c_char;
    pub fn rl_function_dumper(arg1: ::libc::c_int) -> ();
    pub fn rl_macro_dumper(arg1: ::libc::c_int) -> ();
    pub fn rl_variable_dumper(arg1: ::libc::c_int) -> ();
    pub fn rl_read_init_file(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rl_parse_and_bind(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn rl_free_keymap(arg1: Keymap) -> ();
    pub fn rl_get_keymap_name(arg1: Keymap) -> *mut ::libc::c_char;
    pub fn rl_set_keymap_from_edit_mode() -> ();
    pub fn rl_get_keymap_name_from_edit_mode() -> *mut ::libc::c_char;
    pub fn rl_add_funmap_entry(arg1: *const ::libc::c_char,
                               arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                               -> ::libc::c_int;
    pub fn rl_funmap_names() -> *mut *const ::libc::c_char;
    pub fn rl_initialize_funmap() -> ();
    pub fn rl_push_macro_input(arg1: *mut ::libc::c_char) -> ();
    pub fn rl_add_undo(arg1: Enum_undo_code,
                       arg2: ::libc::c_int,
                       arg3: ::libc::c_int,
                       arg4: *mut ::libc::c_char)
                       -> ();
    pub fn rl_free_undo_list() -> ();
    pub fn rl_do_undo() -> ::libc::c_int;
    pub fn rl_begin_undo_group() -> ::libc::c_int;
    pub fn rl_end_undo_group() -> ::libc::c_int;
    pub fn rl_modifying(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_redisplay() -> ();
    pub fn rl_on_new_line() -> ::libc::c_int;
    pub fn rl_on_new_line_with_prompt() -> ::libc::c_int;
    pub fn rl_forced_update_display() -> ::libc::c_int;
    pub fn rl_clear_message() -> ::libc::c_int;
    pub fn rl_reset_line_state() -> ::libc::c_int;
    pub fn rl_crlf() -> ::libc::c_int;
    pub fn rl_message() -> ::libc::c_int;
    pub fn rl_show_char(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_character_len(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_save_prompt() -> ();
    pub fn rl_restore_prompt() -> ();
    pub fn rl_replace_line(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ();
    pub fn rl_insert_text(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rl_delete_text(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_kill_text(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_copy_text(arg1: ::libc::c_int, arg2: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn rl_prep_terminal(arg1: ::libc::c_int) -> ();
    pub fn rl_deprep_terminal() -> ();
    pub fn rl_tty_set_default_bindings(arg1: Keymap) -> ();
    pub fn rl_tty_unset_default_bindings(arg1: Keymap) -> ();
    pub fn rl_reset_terminal(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rl_resize_terminal() -> ();
    pub fn rl_set_screen_size(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ();
    pub fn rl_get_screen_size(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_int) -> ();
    pub fn rl_reset_screen_size() -> ();
    pub fn rl_get_termcap(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn rl_stuff_char(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_execute_next(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_clear_pending_input() -> ::libc::c_int;
    pub fn rl_read_key() -> ::libc::c_int;
    pub fn rl_getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn rl_set_keyboard_input_timeout(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_extend_line_buffer(arg1: ::libc::c_int) -> ();
    pub fn rl_ding() -> ::libc::c_int;
    pub fn rl_alphabetic(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_free(arg1: *mut ::libc::c_void) -> ();
    pub fn rl_set_signals() -> ::libc::c_int;
    pub fn rl_clear_signals() -> ::libc::c_int;
    pub fn rl_cleanup_after_signal() -> ();
    pub fn rl_reset_after_signal() -> ();
    pub fn rl_free_line_state() -> ();
    pub fn rl_echo_signal_char(arg1: ::libc::c_int) -> ();
    pub fn rl_set_paren_blink_timeout(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_clear_history() -> ();
    pub fn rl_maybe_save_line() -> ::libc::c_int;
    pub fn rl_maybe_unsave_line() -> ::libc::c_int;
    pub fn rl_maybe_replace_line() -> ::libc::c_int;
    pub fn rl_complete_internal(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn rl_display_match_list(arg1: *mut *mut ::libc::c_char,
                                 arg2: ::libc::c_int,
                                 arg3: ::libc::c_int)
                                 -> ();
    pub fn rl_completion_matches(arg1: *const ::libc::c_char,
                                 arg2:
                                     *mut ::std::option::Option<extern "C" fn()
                                                                    ->
                                                                        *mut ::libc::c_char>)
     -> *mut *mut ::libc::c_char;
    pub fn rl_username_completion_function(arg1: *const ::libc::c_char,
                                           arg2: ::libc::c_int)
                                           -> *mut ::libc::c_char;
    pub fn rl_filename_completion_function(arg1: *const ::libc::c_char,
                                           arg2: ::libc::c_int)
                                           -> *mut ::libc::c_char;
    pub fn rl_completion_mode(arg1: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                              -> ::libc::c_int;
    pub fn rl_save_state(arg1: *mut Struct_readline_state) -> ::libc::c_int;
    pub fn rl_restore_state(arg1: *mut Struct_readline_state) -> ::libc::c_int;
    pub fn using_history() -> ();
    pub fn history_get_history_state() -> *mut HISTORY_STATE;
    pub fn history_set_history_state(arg1: *mut HISTORY_STATE) -> ();
    pub fn add_history(arg1: *const ::libc::c_char) -> ();
    pub fn add_history_time(arg1: *const ::libc::c_char) -> ();
    pub fn remove_history(arg1: ::libc::c_int) -> *mut HIST_ENTRY;
    pub fn free_history_entry(arg1: *mut HIST_ENTRY) -> histdata_t;
    pub fn replace_history_entry(arg1: ::libc::c_int,
                                 arg2: *const ::libc::c_char,
                                 arg3: histdata_t)
                                 -> *mut HIST_ENTRY;
    pub fn clear_history() -> ();
    pub fn stifle_history(arg1: ::libc::c_int) -> ();
    pub fn unstifle_history() -> ::libc::c_int;
    pub fn history_is_stifled() -> ::libc::c_int;
    pub fn history_list() -> *mut *mut HIST_ENTRY;
    pub fn where_history() -> ::libc::c_int;
    pub fn current_history() -> *mut HIST_ENTRY;
    pub fn history_get(arg1: ::libc::c_int) -> *mut HIST_ENTRY;
    pub fn history_get_time(arg1: *mut HIST_ENTRY) -> time_t;
    pub fn history_total_bytes() -> ::libc::c_int;
    pub fn history_set_pos(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn previous_history() -> *mut HIST_ENTRY;
    pub fn next_history() -> *mut HIST_ENTRY;
    pub fn history_search(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn history_search_prefix(arg1: *const ::libc::c_char,
                                 arg2: ::libc::c_int)
                                 -> ::libc::c_int;
    pub fn history_search_pos(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int,
                              arg3: ::libc::c_int)
                              -> ::libc::c_int;
    pub fn read_history(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn read_history_range(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int,
                              arg3: ::libc::c_int)
                              -> ::libc::c_int;
    pub fn write_history(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn append_history(arg1: ::libc::c_int, arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn history_truncate_file(arg1: *const ::libc::c_char,
                                 arg2: ::libc::c_int)
                                 -> ::libc::c_int;
    pub fn history_expand(arg1: *mut ::libc::c_char,
                          arg2: *mut *mut ::libc::c_char)
                          -> ::libc::c_int;
    pub fn history_arg_extract(arg1: ::libc::c_int,
                               arg2: ::libc::c_int,
                               arg3: *const ::libc::c_char)
                               -> *mut ::libc::c_char;
    pub fn get_history_event(arg1: *const ::libc::c_char,
                             arg2: *mut ::libc::c_int,
                             arg3: ::libc::c_int)
                             -> *mut ::libc::c_char;
    pub fn history_tokenize(arg1: *const ::libc::c_char) -> *mut *mut ::libc::c_char;
}

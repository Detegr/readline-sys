/* automatically generated by rust-bindgen */

pub type histdata_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__hist_entry {
    pub line: *mut ::libc::c_char,
    pub timestamp: *mut ::libc::c_char,
    pub data: histdata_t,
}
impl ::std::clone::Clone for Struct__hist_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__hist_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HIST_ENTRY = Struct__hist_entry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__hist_state {
    pub entries: *mut *mut HIST_ENTRY,
    pub offset: ::libc::c_int,
    pub length: ::libc::c_int,
    pub size: ::libc::c_int,
    pub flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__hist_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__hist_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HISTORY_STATE = Struct__hist_state;
#[link(name = "history")]
extern "C" {
    pub static mut history_base: ::libc::c_int;
    pub static mut history_length: ::libc::c_int;
    pub static mut history_max_entries: ::libc::c_int;
    pub static mut history_expansion_char: ::libc::c_char;
    pub static mut history_subst_char: ::libc::c_char;
    pub static mut history_word_delimiters: *mut ::libc::c_char;
    pub static mut history_comment_char: ::libc::c_char;
    pub static mut history_no_expand_chars: *mut ::libc::c_char;
    pub static mut history_search_delimiter_chars: *mut ::libc::c_char;
    pub static mut history_quotes_inhibit_expansion: ::libc::c_int;
    pub static mut history_write_timestamps: ::libc::c_int;
    pub static mut max_input_history: ::libc::c_int;
    pub static mut history_inhibit_expansion_function:
               *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
}
#[link(name = "history")]
extern "C" {
    pub fn using_history() -> ();
    pub fn history_get_history_state() -> *mut HISTORY_STATE;
    pub fn history_set_history_state(arg1: *mut HISTORY_STATE) -> ();
    pub fn add_history(arg1: *const ::libc::c_char) -> ();
    pub fn add_history_time(arg1: *const ::libc::c_char) -> ();
    pub fn remove_history(arg1: ::libc::c_int) -> *mut HIST_ENTRY;
    pub fn free_history_entry(arg1: *mut HIST_ENTRY) -> histdata_t;
    pub fn replace_history_entry(arg1: ::libc::c_int,
                                 arg2: *const ::libc::c_char,
                                 arg3: histdata_t) -> *mut HIST_ENTRY;
    pub fn clear_history() -> ();
    pub fn stifle_history(arg1: ::libc::c_int) -> ();
    pub fn unstifle_history() -> ::libc::c_int;
    pub fn history_is_stifled() -> ::libc::c_int;
    pub fn history_list() -> *mut *mut HIST_ENTRY;
    pub fn where_history() -> ::libc::c_int;
    pub fn current_history() -> *mut HIST_ENTRY;
    pub fn history_get(arg1: ::libc::c_int) -> *mut HIST_ENTRY;
    pub fn history_get_time(arg1: *mut HIST_ENTRY) -> time_t;
    pub fn history_total_bytes() -> ::libc::c_int;
    pub fn history_set_pos(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn previous_history() -> *mut HIST_ENTRY;
    pub fn next_history() -> *mut HIST_ENTRY;
    pub fn history_search(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn history_search_prefix(arg1: *const ::libc::c_char,
                                 arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn history_search_pos(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn read_history(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn read_history_range(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn write_history(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn append_history(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn history_truncate_file(arg1: *const ::libc::c_char,
                                 arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn history_expand(arg1: *mut ::libc::c_char,
                          arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn history_arg_extract(arg1: ::libc::c_int, arg2: ::libc::c_int,
                               arg3: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn get_history_event(arg1: *const ::libc::c_char,
                             arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn history_tokenize(arg1: *const ::libc::c_char)
     -> *mut *mut ::libc::c_char;
}
